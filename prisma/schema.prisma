generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  userType          UserType           @default(CHILD)
  parentId          String?
  creditScore       Int?               @default(500)
  resetToken        String?            @unique
  resetTokenExpires DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  childId           String?            @unique
  level             Int?               @default(1)
  xp                Int?               @default(0)
  accounts          Account[]
  createdModules    Module[]           @relation("CreatedModules")
  assignedModules   ModuleAssignment[] @relation("ParentAssignments")
  moduleAssignments ModuleAssignment[] @relation("ChildAssignments")
  moduleProgress    ModuleProgress[]   @relation("ModuleProgress")
  sessions          Session[]
  parent            User?              @relation("ParentToChild", fields: [parentId], references: [id])
  children          User[]             @relation("ParentToChild")
  childRelations    UserRelation[]     @relation("ChildRelation")
  parentRelations   UserRelation[]     @relation("ParentRelation")
  assignedTasks     Task[]             @relation("ChildTasks")
  createdTasks      Task[]             @relation("ParentTasks")
}

model UserRelation {
  id        String   @id @default(cuid())
  parentId  String
  childId   String
  relation  String   @default("OTHER")
  createdAt DateTime @default(now())
  child     User     @relation("ChildRelation", fields: [childId], references: [id])
  parent    User     @relation("ParentRelation", fields: [parentId], references: [id])
}

model Module {
  id            String             @id @default(cuid())
  title         String             @unique
  description   String
  thumbnailUrl  String?
  totalDuration String
  totalLessons  Int                @default(0)
  isPublished   Boolean            @default(false)
  isMarketplace Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  category      ModuleCategory     @default(GENERAL)
  difficulty    ModuleDifficulty   @default(BEGINNER)
  creatorId     String
  creator       User               @relation("CreatedModules", fields: [creatorId], references: [id])
  assignments   ModuleAssignment[]
  contents      ModuleContent[]
  progress      ModuleProgress[]   @relation("ModuleToProgress")
}

model ModuleContent {
  id          String   @id @default(cuid())
  moduleId    String
  title       String
  description String?
  videoUrl    String
  duration    String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model ModuleAssignment {
  id           String   @id @default(cuid())
  moduleId     String
  childId      String
  assignedById String
  assignedAt   DateTime @default(now())
  assignedBy   User     @relation("ParentAssignments", fields: [assignedById], references: [id])
  child        User     @relation("ChildAssignments", fields: [childId], references: [id])
  module       Module   @relation(fields: [moduleId], references: [id])
}

model ModuleProgress {
  id               String   @id @default(cuid())
  childId          String
  moduleId         String
  status           String   @default("NOT_STARTED")
  completedLessons Int      @default(0)
  lastUpdated      DateTime @default(now())
  child            User     @relation("ModuleProgress", fields: [childId], references: [id])
  module           Module   @relation("ModuleToProgress", fields: [moduleId], references: [id])
  
  @@unique([childId, moduleId])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String    @default("")
  dueDate     DateTime?
  status      TaskStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  childId     String
  parentId    String
  child       User      @relation("ChildTasks", fields: [childId], references: [id], onDelete: Cascade)
  parent      User      @relation("ParentTasks", fields: [parentId], references: [id], onDelete: Cascade)
}

enum UserType {
  CHILD
  PARENT
}

enum TaskStatus {
  PENDING
  COMPLETED
}

enum ModuleCategory {
  GENERAL
  SAVINGS
  INVESTING
  BUDGETING
  ENTREPRENEURSHIP
}

enum ModuleDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}
